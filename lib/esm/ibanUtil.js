import { countryByCode } from "./country";
import { BbanStructure } from "./bbanStructure";
import { PartType } from "./structurePart";
import { InvalidCheckDigitException, FormatViolation, FormatException, UnsupportedCountryException, } from "./exceptions";
const ucRegex = /^[A-Z]+$/;
const numRegex = /^[0-9]+$/;
export const DEFAULT_CHECK_DIGIT = "00";
const MOD = 97;
const MAX = 999999999;
const COUNTRY_CODE_INDEX = 0;
const COUNTRY_CODE_LENGTH = 2;
const CHECK_DIGIT_INDEX = COUNTRY_CODE_LENGTH;
const CHECK_DIGIT_LENGTH = 2;
const BBAN_INDEX = CHECK_DIGIT_INDEX + CHECK_DIGIT_LENGTH;
export function calculateCheckDigit(iban) {
    const reformattedIban = replaceCheckDigit(iban, DEFAULT_CHECK_DIGIT);
    const modResult = calculateMod(reformattedIban);
    const checkDigit = String(98 - modResult);
    return checkDigit.padStart(2, "0");
}
export function validate(iban) {
    validateNotEmpty(iban);
    validateCountryCode(iban, true);
    validateCheckDigitPresence(iban);
    validateBban(getCountryCode(iban), getBban(iban));
    validateCheckDigitChecksum(iban);
}
export function validateCheckDigit(iban) {
    validateNotEmpty(iban);
    validateCheckDigitPresence(iban);
    validateCountryCode(iban, false);
    validateCheckDigitChecksum(iban);
}
export function validateBban(countryCode, bban) {
    validateCountryCode(countryCode, true);
    const structure = getBbanStructure(countryCode);
    if (!structure) {
        throw new Error("Internal error, expected structure");
    }
    structure.validate(bban);
}
export function isSupportedCountry(countryCode) {
    return BbanStructure.forCountry(countryCode) != null;
}
export function getIbanLength(countryCode) {
    const structure = getBbanStructure(countryCode);
    if (structure === null) {
        throw new UnsupportedCountryException("Unsuppored country", countryCode);
    }
    return COUNTRY_CODE_LENGTH + CHECK_DIGIT_LENGTH + structure.getBbanLength();
}
export function getCheckDigit(iban) {
    return iban.substring(CHECK_DIGIT_INDEX, CHECK_DIGIT_INDEX + CHECK_DIGIT_LENGTH);
}
export function getCountryCode(iban) {
    return iban.substring(COUNTRY_CODE_INDEX, COUNTRY_CODE_INDEX + COUNTRY_CODE_LENGTH);
}
export function getCountryCodeAndCheckDigit(iban) {
    return iban.substring(COUNTRY_CODE_INDEX, COUNTRY_CODE_INDEX + COUNTRY_CODE_LENGTH + CHECK_DIGIT_LENGTH);
}
export function getBban(iban) {
    return iban.substring(BBAN_INDEX);
}
export function getAccountNumber(iban) {
    return extractBbanEntry(iban, PartType.ACCOUNT_NUMBER);
}
export function getBankCode(iban) {
    return extractBbanEntry(iban, PartType.BANK_CODE);
}
export function getBranchCode(iban) {
    return extractBbanEntry(iban, PartType.BRANCH_CODE);
}
export function getNationalCheckDigit(iban) {
    return extractBbanEntry(iban, PartType.NATIONAL_CHECK_DIGIT);
}
export function getBranchCheckDigit(iban) {
    return extractBbanEntry(iban, PartType.BRANCH_CHECK_DIGIT);
}
export function getCurrencyType(iban) {
    return extractBbanEntry(iban, PartType.CURRENCY_TYPE);
}
export function getAccountType(iban) {
    return extractBbanEntry(iban, PartType.ACCOUNT_TYPE);
}
export function getOwnerAccountType(iban) {
    return extractBbanEntry(iban, PartType.OWNER_ACCOUNT_NUMBER);
}
export function getIdentificationNumber(iban) {
    return extractBbanEntry(iban, PartType.IDENTIFICATION_NUMBER);
}
export function replaceCheckDigit(iban, checkDigit) {
    return getCountryCode(iban) + checkDigit + getBban(iban);
}
export function toFormattedString(iban, separator = " ") {
    return iban.replace(/(.{4})/g, `$1${separator}`).trim();
}
export function toFormattedStringBBAN(iban, separator = " ") {
    const structure = getBbanStructure(iban);
    if (structure === null) {
        throw new Error("should't happen - already validated IBAN");
    }
    const bban = getBban(iban);
    const parts = structure.getParts().reduce((acc, part) => {
        const value = structure.extractValue(bban, part.getPartType());
        return acc.concat(value || "", part.trailingSeparator ? separator : "");
    }, []);
    parts.pop();
    return parts.join("");
}
export function validateCheckDigitChecksum(iban) {
    if (calculateMod(iban) != 1) {
        const checkDigit = getCheckDigit(iban);
        const expectedCheckDigit = calculateCheckDigit(iban);
        throw new InvalidCheckDigitException(`[${iban}] has invalid check digit: ${checkDigit}, expected check digit is: ${expectedCheckDigit}`, checkDigit, expectedCheckDigit);
    }
}
function validateNotEmpty(iban) {
    if (iban == null) {
        throw new FormatException(FormatViolation.NOT_NULL, "Null can't be a valid Iban.");
    }
    if (iban.length === 0) {
        throw new FormatException(FormatViolation.NOT_EMPTY, "Empty string can't be a valid Iban.");
    }
}
function validateCountryCode(iban, hasStructure = true) {
    if (iban.length < COUNTRY_CODE_LENGTH) {
        throw new FormatException(FormatViolation.COUNTRY_CODE_TWO_LETTERS, "Iban must contain 2 char country code.", iban);
    }
    const countryCode = getCountryCode(iban);
    if (countryCode !== countryCode.toUpperCase() || !ucRegex.test(countryCode)) {
        throw new FormatException(FormatViolation.COUNTRY_CODE_ONLY_UPPER_CASE_LETTERS, "Iban country code must contain upper case letters.", countryCode);
    }
    const country = countryByCode(countryCode);
    if (country == null) {
        throw new FormatException(FormatViolation.COUNTRY_CODE_EXISTS, "Iban contains non existing country code.", countryCode);
    }
    if (hasStructure) {
        const structure = BbanStructure.forCountry(country);
        if (structure == null) {
            throw new UnsupportedCountryException("Country code is not supported.", countryCode);
        }
    }
}
function validateCheckDigitPresence(iban) {
    if (iban.length < COUNTRY_CODE_LENGTH + CHECK_DIGIT_LENGTH) {
        throw new FormatException(FormatViolation.CHECK_DIGIT_TWO_DIGITS, "Iban must contain 2 digit check digit.", iban.substring(COUNTRY_CODE_LENGTH));
    }
    const checkDigit = getCheckDigit(iban);
    if (!numRegex.test(checkDigit)) {
        throw new FormatException(FormatViolation.CHECK_DIGIT_ONLY_DIGITS, "Iban's check digit should contain only digits.", checkDigit);
    }
}
function calculateMod(iban) {
    const reformattedIban = getBban(iban) + getCountryCodeAndCheckDigit(iban);
    const VA = "A".charCodeAt(0);
    const VZ = "Z".charCodeAt(0);
    const V0 = "0".charCodeAt(0);
    const V9 = "9".charCodeAt(0);
    function addSum(total, value) {
        const newTotal = (value > 9 ? total * 100 : total * 10) + value;
        return newTotal > MAX ? newTotal % MOD : newTotal;
    }
    const total = reformattedIban
        .toUpperCase()
        .split("")
        .reduce((totalValue, ch) => {
        const code = ch.charCodeAt(0);
        if (VA <= code && code <= VZ) {
            return addSum(totalValue, code - VA + 10);
        }
        else if (V0 <= code && code <= V9) {
            return addSum(totalValue, code - V0);
        }
        else {
            throw new FormatException(FormatViolation.IBAN_VALID_CHARACTERS, `Invalid Character[${ch}] = '${code}'`, ch);
        }
    }, 0);
    return total % MOD;
}
function getBbanStructure(iban) {
    const countryCode = countryByCode(getCountryCode(iban));
    if (!countryCode) {
        return null;
    }
    return getBbanStructureByCountry(countryCode);
}
function getBbanStructureByCountry(countryCode) {
    return BbanStructure.forCountry(countryCode);
}
function extractBbanEntry(iban, partType) {
    const bban = getBban(iban);
    const structure = getBbanStructure(iban);
    if (structure === null) {
        return null;
    }
    return structure.extractValue(bban, partType);
}
//# sourceMappingURL=data:application/json;base64,